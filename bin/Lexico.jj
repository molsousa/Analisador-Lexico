options
{
  static = false;
}

PARSER_BEGIN(Lexico)

import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
	String tipo;
	String lexema;

	public InfoToken(String tipo, String lexema) {
		this.tipo = tipo;
		this.lexema = lexema;
	}

	@Override
	public String toString() {
		return "Tipo: "+tipo+ "\nLexema: <'"+ lexema+ "'>\n";
	}
}

public class Lexico
{
  	public static LinkedList< InfoToken > reservada = new LinkedList<>();
  	public static LinkedList< InfoToken > simbolo = new LinkedList<>();
  	
	public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
		Lexico parser;
		FileInputStream arquivo;

		try {
		  arquivo = new FileInputStream("fonte_2.txt");
		}
		catch(FileNotFoundException e) {
			System.out.println(e);
			return;
		}

		try {
			parser = new Lexico(arquivo);
			parser.processarEntrada();

			parser.imprimirTokens(reservada);
			parser.imprimirTokens(simbolo);
		}
		catch(ParseException e) {
		  	System.out.println(e);
		}
		catch(TokenMgrError e) {
			System.out.println(e);
		}
	}
	
	public void inserirToken(LinkedList<InfoToken> l, String tipo, String lexema) {
 		l.add(new InfoToken(tipo, lexema));
	}

	public void imprimirTokens(LinkedList<InfoToken> l) {
		if(l.isEmpty()) {
			System.out.println("Lista vazia");
			return;
		}
		for(InfoToken tok : l) {
			System.out.println(tok);
		}
	}
}

PARSER_END(Lexico)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// Palavras reservadas
TOKEN:
{
  	< TOKEN_IF: "if" >
|   < TOKEN_ELSE: "else" >
| 	< TOKEN_WHILE: "while" >
| 	< TOKEN_FOR: "for" >
| 	< TOKEN_VOID: "void" >
| 	< TOKEN_INT: "integer" >
| 	< TOKEN_FLOAT: "float" >
| 	< TOKEN_CHAR: "character" >
| 	< TOKEN_BOOL: "boolean" >
| 	< TOKEN_RETURN: "return" >
| 	< TOKEN_TRUE: "true" >
| 	< TOKEN_FALSE: "false" >
| 	< TOKEN_DOUBLE: "double" >
| 	< TOKEN_SWITCH: "switch" >
| 	< TOKEN_DO: "do" >
| 	< TOKEN_TRY: "try" >
| 	< TOKEN_EXCEPT: "except" >
| 	< TOKEN_IMPORT: "import" >
}

// Operadores
TOKEN:
{
  < ADICAO : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
| < ATRIBUICAO: "=" >
| < MODULO: "%" >
| < IGUAL: "==" >
| < DIFERENTE: "!=" >
| < MENOR: "<" >
| < MAIOR: ">" >
| < MAIOR_IGUAL: ">=" >
| < MENOR_IGUAL: "<=" >
| < AND: "&&" >
| < NOT: "!" >
| < OR: "||" >
| < INCREMENTO: "++" >
| < DECREMENTO: "--" >
| < SOMA_ATRIBUICAO: "+=" >
| < SUBTRACAO_ATRIBUICAO: "-=" >
| < MULTIPLICACAO_ATRIBUICAO: "*=" >
| < DIVISAO_ATRIBUICAO: "/=" >
| < MODULO_ATRIBUICAO: "%/" >
}

// Separadores
TOKEN:
{
  < PONTO_VIRGULA: ";" >
| < VIRGULA: "," >
| < PONTO: "." >
| < ABRE_CHAVES: "{" >
| < FECHA_CHAVES: "}" >
| < ABRE_PARENTESIS: "(" >
| < FECHA_PARENTESIS: ")" >
| < ABRE_COLCHETES: "[" >
| < FECHA_COLCHETES: "]" >
}

TOKEN :
{
  < INTEIRO: (["+","-"])? (< DIGITO >)+ >
| < REAL: < INTEIRO > (< DIGITO >)+ "." (< DIGITO >)+ >
| < IDENTIFICADOR: < LETRA > (< LETRA > | < DIGITO >)* >
| < STRING: "\"" (~["\""])* "\"" >
| < DIGITO : ["0"-"9"] >
| < LETRA: ["a"-"z","A"-"Z"] >
}

TOKEN:
{
	< CARACTER_ILEGAL: (~[]) >
}

void processarEntrada():
{
  Token t;
}
{
(
    t = < TOKEN_IF > { inserirToken(reservada, "CONDICIONAL", t.image); }
|   t = < TOKEN_ELSE > { inserirToken(reservada, "CONDICIONAL", t.image); }
|   t = < TOKEN_WHILE > { inserirToken(reservada, "REPETICAO", t.image); }
|   t = < TOKEN_FOR > { inserirToken(reservada, "REPETICAO", t.image); }
|   t = < TOKEN_VOID > { inserirToken(reservada, "TIPO_DADO", t.image); }
|   t = < TOKEN_INT > { inserirToken(reservada, "TIPO_DADO", t.image); }
|   t = < TOKEN_FLOAT > { inserirToken(reservada, "TIPO_DADO", t.image); }
|   t = < TOKEN_CHAR > { inserirToken(reservada, "TIPO_DADO", t.image); }
|   t = < TOKEN_BOOL > { inserirToken(reservada, "TIPO_DADO", t.image); }
|   t = < TOKEN_RETURN > { inserirToken(reservada, "RETORNO", t.image); }
|   t = < TOKEN_TRUE > { inserirToken(reservada, "VALOR_BOOLEANO", t.image); }
|   t = < TOKEN_FALSE > { inserirToken(reservada, "VALOR_BOOLEANO", t.image); }
| 	t = < TOKEN_DOUBLE > { inserirToken(reservada, "TIPO_DADO", t.image); }
| 	t = < TOKEN_SWITCH > { inserirToken(reservada, "CONDICIONAL", t.image); }
| 	t = < TOKEN_DO > { inserirToken(reservada, "REPETICAO",	 t.image); }
| 	t = < TOKEN_TRY > { inserirToken(reservada, "EXCECAO", t.image); }
| 	t = < TOKEN_EXCEPT > { inserirToken(reservada, "EXCECAO", t.image); }
| 	t = < TOKEN_IMPORT > { inserirToken(reservada, "IMPORT", t.image); }

|   t = < ADICAO > { inserirToken(reservada, "OPERADOR_ADICAO", t.image); }
| 	t = < SUBTRACAO > { inserirToken(reservada, "OPERADOR_SUBTRACAO", t.image); }
| 	t = < MULTIPLICACAO > { inserirToken(reservada, "OPERADOR_MULTIPLICACAO", t.image); }
| 	t = < DIVISAO > { inserirToken(reservada, "OPERADOR_DIVISAO", t.image); }
| 	t = < ATRIBUICAO > { inserirToken(reservada, "OPERADOR_ATRIBUICAO", t.image); }
| 	t = < MODULO > { inserirToken(reservada, "OPERADOR_MODULO", t.image); }
| 	t = < IGUAL > { inserirToken(reservada, "OPERADOR_IGUAL", t.image); }
| 	t = < DIFERENTE > { inserirToken(reservada, "OPERADOR_DIFERENTE", t.image); }
| 	t = < MENOR > { inserirToken(reservada, "OPERADOR_MENOR", t.image); }
| 	t = < MAIOR > { inserirToken(reservada, "OPERADOR_MAIOR", t.image); }
| 	t = < MAIOR_IGUAL > { inserirToken(reservada, "OPERADOR_MAIOR_IGUAL", t.image); }
| 	t = < MENOR_IGUAL > { inserirToken(reservada, "OPERADOR_MENOR_IGUAL", t.image); }
| 	t = < AND > { inserirToken(reservada, "OPERADOR_AND", t.image); }
| 	t = < NOT > { inserirToken(reservada, "OPERADOR_NOT", t.image); }
| 	t = < OR > { inserirToken(reservada, "OPERADOR_OR", t.image); }
| 	t = < INCREMENTO > { inserirToken(reservada, "OPERADOR_INCREMENTO", t.image); }
| 	t = < DECREMENTO > { inserirToken(reservada, "OPERADOR_DECREMENTO", t.image); }
| 	t = < SOMA_ATRIBUICAO > { inserirToken(reservada, "SOMA_ATRIBUICAO", t.image); }
| 	t = < SUBTRACAO_ATRIBUICAO > { inserirToken(reservada, "SUBTRACAO_ATRIBUICAO", t.image); }
| 	t = < MULTIPLICACAO_ATRIBUICAO > { inserirToken(reservada, "MULTIPLICACAO_ATRIBUICAO", t.image); }
| 	t = < DIVISAO_ATRIBUICAO > { inserirToken(reservada, "DIVISAO_ATRIBUICAO", t.image); }
| 	t = < MODULO_ATRIBUICAO > { inserirToken(reservada, "MODULO_ATRIBUICAO", t.image); }

| 	t = < PONTO_VIRGULA > { inserirToken(reservada, "SEPARADOR_PONTO_VIRGULA", t.image); }
| 	t = < VIRGULA > { inserirToken(reservada, "SEPARADOR_VIRGULA", t.image); }
| 	t = < PONTO > { inserirToken(reservada, "SEPARADOR_PONTO", t.image); }
| 	t = < ABRE_CHAVES > { inserirToken(reservada, "SEPARADOR_ABRE_CHAVES", t.image); }
| 	t = < FECHA_CHAVES > { inserirToken(reservada, "SEPARADOR_FECHA_CHAVES", t.image); }
| 	t = < ABRE_PARENTESIS > { inserirToken(reservada, "SEPARADOR_ABRE_PARENTESIS", t.image); }
| 	t = < FECHA_PARENTESIS > { inserirToken(reservada, "SEPARADOR_FECHA_PARENTESIS", t.image); }
| 	t = < ABRE_COLCHETES > { inserirToken(reservada, "SEPARADOR_ABRE_COLCHETES", t.image); }
| 	t = < FECHA_COLCHETES > { inserirToken(reservada, "SEPARADOR_FECHA_COLCHETES", t.image); }

| 	t = < INTEIRO > { inserirToken(simbolo, "CONSTANTE_INTEIRA", t.image); }
| 	t = < REAL > { inserirToken(simbolo, "CONSTANTE_REAL", t.image); }
| 	t = < IDENTIFICADOR > { inserirToken(simbolo, "IDENTIFICADOR", t.image); }
| 	t = < CARACTER_ILEGAL > { inserirToken(simbolo, "CARACTER_ILEGAL", t.image); }
| 	t = < STRING > { inserirToken(simbolo, "STRING_LITERAL", t.image); })*
< EOF >
}


