/* Lexico.java */
/* Generated By:JavaCC: Do not edit this line. Lexico.java */
import java.util.Scanner;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
    String tipo;
    String lexema;
    int linha;
    int coluna;

    public InfoToken(String tipo, String lexema, int linha, int coluna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linha = linha;
        this.coluna = coluna;
    }

    @Override
    public String toString() {
        return String.format("Tipo: %s\nLexema: <'%s'>\nLinha: %d, Coluna: %d\n", this.tipo, this.lexema, this.linha, this.coluna);
    }
}

public class Lexico implements LexicoConstants {
    public static LinkedList<InfoToken> reservada = new LinkedList<>();
    public static LinkedList<InfoToken> simbolo = new LinkedList<>();
    public static LinkedList<InfoToken> erros = new LinkedList<>();

    private static final int MAX = 32;

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        Lexico parser;
        FileInputStream arquivo;
        Scanner scanner = new Scanner(System.in);
                String nomeArquivo;
                int opcao;

                System.out.print("Insira o nome do arquivo: ");
        nomeArquivo = scanner.nextLine();

        try {
            arquivo = new FileInputStream(nomeArquivo);
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
            return;
        }

        try {
            parser = new Lexico(arquivo);
            parser.processarEntrada();

                        do {
                                menu();
                                opcao = scanner.nextInt();
                                buffer(scanner);

                                switch(opcao) {
                            case 1:
                                System.out.println("\n---PALAVRAS RESERVADAS E OPERADORES---");
                                parser.imprimirTokens(reservada);
                                break;
                            case 2:
                                System.out.println("\n---CONSTANTES E IDENTIFICADORES---");
                                parser.imprimirTokens(simbolo);
                                        break;
                                case 3:
                                        if (!erros.isEmpty()) {
                                    System.out.println("---ERROS L\u00c9XICOS---\n");
                                    parser.imprimirTokens(erros);
                                }
                                break;
                                case 0:
                                        System.out.println("Obrigado!!");
                                        break;
                                }
                        }while(opcao != 0);
                }

                catch(ParseException e) {
            System.out.println(e);
        }
        catch(TokenMgrError e) {
            System.out.println(e);
        }

        scanner.close();
    }

    public void inserirTokenUnico(LinkedList<InfoToken> l, String tipo, Token t) {
        for (InfoToken tok : l) {
            if (tok.lexema.equals(t.image)) {
                return;
            }
        }
        l.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void inserirErro(String tipo, Token t) {
        erros.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void imprimirTokens(LinkedList<InfoToken> l) {
        if (l.isEmpty()) {
            System.out.println("Lista vazia");
            return;
        }
        for (InfoToken tok : l) {
            System.out.println(tok);
        }
    }

    public static void menu() {
                System.out.println("1 - Imprimir palavras reservadas");
                System.out.println("2 - Imprimir s\u00edmbolos");
                System.out.println("3 - Erros");
                System.out.println("0 - Sair");
                System.out.print("Insira uma op\u00e7\u00e3o: ");
    }

    public static void buffer(Scanner scanner) {
                if(scanner.hasNextLine()) {
                        scanner.nextLine();
                }
    }

  final public void processarEntrada() throws ParseException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IF:
      case TOKEN_ELSE:
      case TOKEN_WHILE:
      case TOKEN_FOR:
      case TOKEN_VOID:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_RETURN:
      case TOKEN_TRUE:
      case TOKEN_FALSE:
      case TOKEN_DOUBLE:
      case TOKEN_SWITCH:
      case TOKEN_DO:
      case TOKEN_TRY:
      case TOKEN_EXCEPT:
      case TOKEN_IMPORT:
      case ADICAO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case ATRIBUICAO:
      case MODULO:
      case IGUAL:
      case DIFERENTE:
      case MENOR:
      case MAIOR:
      case MAIOR_IGUAL:
      case MENOR_IGUAL:
      case AND:
      case NOT:
      case OR:
      case INCREMENTO:
      case DECREMENTO:
      case SOMA_ATRIBUICAO:
      case SUBTRACAO_ATRIBUICAO:
      case MULTIPLICACAO_ATRIBUICAO:
      case DIVISAO_ATRIBUICAO:
      case MODULO_ATRIBUICAO:
      case PONTO_VIRGULA:
      case VIRGULA:
      case PONTO:
      case ABRE_CHAVES:
      case FECHA_CHAVES:
      case ABRE_PARENTESIS:
      case FECHA_PARENTESIS:
      case ABRE_COLCHETES:
      case FECHA_COLCHETES:
      case IDENTIFICADOR_INVALIDO:
      case STRING_INVALIDA:
      case REAL_INVALIDO:
      case INTEIRO:
      case REAL:
      case IDENTIFICADOR:
      case STRING:
      case SIMBOLO_INVALIDO:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IF:{
        t = jj_consume_token(TOKEN_IF);
inserirTokenUnico(reservada, "CONDICIONAL", t);
        break;
        }
      case TOKEN_ELSE:{
        t = jj_consume_token(TOKEN_ELSE);
inserirTokenUnico(reservada, "CONDICIONAL", t);
        break;
        }
      case TOKEN_WHILE:{
        t = jj_consume_token(TOKEN_WHILE);
inserirTokenUnico(reservada, "REPETICAO", t);
        break;
        }
      case TOKEN_FOR:{
        t = jj_consume_token(TOKEN_FOR);
inserirTokenUnico(reservada, "REPETICAO", t);
        break;
        }
      case TOKEN_VOID:{
        t = jj_consume_token(TOKEN_VOID);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_INT:{
        t = jj_consume_token(TOKEN_INT);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_FLOAT:{
        t = jj_consume_token(TOKEN_FLOAT);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_CHAR:{
        t = jj_consume_token(TOKEN_CHAR);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_BOOL:{
        t = jj_consume_token(TOKEN_BOOL);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_RETURN:{
        t = jj_consume_token(TOKEN_RETURN);
inserirTokenUnico(reservada, "RETORNO", t);
        break;
        }
      case TOKEN_TRUE:{
        t = jj_consume_token(TOKEN_TRUE);
inserirTokenUnico(reservada, "VALOR_BOOLEANO", t);
        break;
        }
      case TOKEN_FALSE:{
        t = jj_consume_token(TOKEN_FALSE);
inserirTokenUnico(reservada, "VALOR_BOOLEANO", t);
        break;
        }
      case TOKEN_DOUBLE:{
        t = jj_consume_token(TOKEN_DOUBLE);
inserirTokenUnico(reservada, "TIPO_DADO", t);
        break;
        }
      case TOKEN_SWITCH:{
        t = jj_consume_token(TOKEN_SWITCH);
inserirTokenUnico(reservada, "CONDICIONAL", t);
        break;
        }
      case TOKEN_DO:{
        t = jj_consume_token(TOKEN_DO);
inserirTokenUnico(reservada, "REPETICAO",   t);
        break;
        }
      case TOKEN_TRY:{
        t = jj_consume_token(TOKEN_TRY);
inserirTokenUnico(reservada, "EXCECAO", t);
        break;
        }
      case TOKEN_EXCEPT:{
        t = jj_consume_token(TOKEN_EXCEPT);
inserirTokenUnico(reservada, "EXCECAO", t);
        break;
        }
      case TOKEN_IMPORT:{
        t = jj_consume_token(TOKEN_IMPORT);
inserirTokenUnico(reservada, "IMPORT", t);
        break;
        }
      case ADICAO:{
        t = jj_consume_token(ADICAO);
inserirTokenUnico(reservada, "OPERADOR_ADICAO", t);
        break;
        }
      case SUBTRACAO:{
        t = jj_consume_token(SUBTRACAO);
inserirTokenUnico(reservada, "OPERADOR_SUBTRACAO", t);
        break;
        }
      case MULTIPLICACAO:{
        t = jj_consume_token(MULTIPLICACAO);
inserirTokenUnico(reservada, "OPERADOR_MULTIPLICACAO", t);
        break;
        }
      case DIVISAO:{
        t = jj_consume_token(DIVISAO);
inserirTokenUnico(reservada, "OPERADOR_DIVISAO", t);
        break;
        }
      case ATRIBUICAO:{
        t = jj_consume_token(ATRIBUICAO);
inserirTokenUnico(reservada, "OPERADOR_ATRIBUICAO", t);
        break;
        }
      case MODULO:{
        t = jj_consume_token(MODULO);
inserirTokenUnico(reservada, "OPERADOR_MODULO", t);
        break;
        }
      case IGUAL:{
        t = jj_consume_token(IGUAL);
inserirTokenUnico(reservada, "OPERADOR_IGUAL", t);
        break;
        }
      case DIFERENTE:{
        t = jj_consume_token(DIFERENTE);
inserirTokenUnico(reservada, "OPERADOR_DIFERENTE", t);
        break;
        }
      case MENOR:{
        t = jj_consume_token(MENOR);
inserirTokenUnico(reservada, "OPERADOR_MENOR", t);
        break;
        }
      case MAIOR:{
        t = jj_consume_token(MAIOR);
inserirTokenUnico(reservada, "OPERADOR_MAIOR", t);
        break;
        }
      case MAIOR_IGUAL:{
        t = jj_consume_token(MAIOR_IGUAL);
inserirTokenUnico(reservada, "OPERADOR_MAIOR_IGUAL", t);
        break;
        }
      case MENOR_IGUAL:{
        t = jj_consume_token(MENOR_IGUAL);
inserirTokenUnico(reservada, "OPERADOR_MENOR_IGUAL", t);
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
inserirTokenUnico(reservada, "OPERADOR_AND", t);
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
inserirTokenUnico(reservada, "OPERADOR_NOT", t);
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
inserirTokenUnico(reservada, "OPERADOR_OR", t);
        break;
        }
      case INCREMENTO:{
        t = jj_consume_token(INCREMENTO);
inserirTokenUnico(reservada, "OPERADOR_INCREMENTO", t);
        break;
        }
      case DECREMENTO:{
        t = jj_consume_token(DECREMENTO);
inserirTokenUnico(reservada, "OPERADOR_DECREMENTO", t);
        break;
        }
      case SOMA_ATRIBUICAO:{
        t = jj_consume_token(SOMA_ATRIBUICAO);
inserirTokenUnico(reservada, "SOMA_ATRIBUICAO", t);
        break;
        }
      case SUBTRACAO_ATRIBUICAO:{
        t = jj_consume_token(SUBTRACAO_ATRIBUICAO);
inserirTokenUnico(reservada, "SUBTRACAO_ATRIBUICAO", t);
        break;
        }
      case MULTIPLICACAO_ATRIBUICAO:{
        t = jj_consume_token(MULTIPLICACAO_ATRIBUICAO);
inserirTokenUnico(reservada, "MULTIPLICACAO_ATRIBUICAO", t);
        break;
        }
      case DIVISAO_ATRIBUICAO:{
        t = jj_consume_token(DIVISAO_ATRIBUICAO);
inserirTokenUnico(reservada, "DIVISAO_ATRIBUICAO", t);
        break;
        }
      case MODULO_ATRIBUICAO:{
        t = jj_consume_token(MODULO_ATRIBUICAO);
inserirTokenUnico(reservada, "MODULO_ATRIBUICAO", t);
        break;
        }
      case PONTO_VIRGULA:{
        t = jj_consume_token(PONTO_VIRGULA);
inserirTokenUnico(reservada, "SEPARADOR_PONTO_VIRGULA", t);
        break;
        }
      case VIRGULA:{
        t = jj_consume_token(VIRGULA);
inserirTokenUnico(reservada, "SEPARADOR_VIRGULA", t);
        break;
        }
      case PONTO:{
        t = jj_consume_token(PONTO);
inserirTokenUnico(reservada, "SEPARADOR_PONTO", t);
        break;
        }
      case ABRE_CHAVES:{
        t = jj_consume_token(ABRE_CHAVES);
inserirTokenUnico(reservada, "SEPARADOR_ABRE_CHAVES", t);
        break;
        }
      case FECHA_CHAVES:{
        t = jj_consume_token(FECHA_CHAVES);
inserirTokenUnico(reservada, "SEPARADOR_FECHA_CHAVES", t);
        break;
        }
      case ABRE_PARENTESIS:{
        t = jj_consume_token(ABRE_PARENTESIS);
inserirTokenUnico(reservada, "SEPARADOR_ABRE_PARENTESIS", t);
        break;
        }
      case FECHA_PARENTESIS:{
        t = jj_consume_token(FECHA_PARENTESIS);
inserirTokenUnico(reservada, "SEPARADOR_FECHA_PARENTESIS", t);
        break;
        }
      case ABRE_COLCHETES:{
        t = jj_consume_token(ABRE_COLCHETES);
inserirTokenUnico(reservada, "SEPARADOR_ABRE_COLCHETES", t);
        break;
        }
      case FECHA_COLCHETES:{
        t = jj_consume_token(FECHA_COLCHETES);
inserirTokenUnico(reservada, "SEPARADOR_FECHA_COLCHETES", t);
        break;
        }
      case IDENTIFICADOR_INVALIDO:{
        t = jj_consume_token(IDENTIFICADOR_INVALIDO);
inserirErro("IDENTIFICADOR_INVALIDO", t);
        break;
        }
      case STRING_INVALIDA:{
        t = jj_consume_token(STRING_INVALIDA);
inserirErro("STRING_INVALIDA", t);
        break;
        }
      case REAL_INVALIDO:{
        t = jj_consume_token(REAL_INVALIDO);
inserirErro("REAL_INVALIDO", t);
        break;
        }
      case INTEIRO:{
        t = jj_consume_token(INTEIRO);
inserirTokenUnico(simbolo, "CONSTANTE_INTEIRA", t);
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
inserirTokenUnico(simbolo, "CONSTANTE_REAL", t);
        break;
        }
      case IDENTIFICADOR:{
        t = jj_consume_token(IDENTIFICADOR);
if (t.image.length() > MAX) {
          inserirErro("IDENTIFICADOR_LONGO", t);
      } else {
          inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
      }
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
inserirTokenUnico(simbolo, "STRING_LITERAL", t);
        break;
        }
      case SIMBOLO_INVALIDO:{
        t = jj_consume_token(SIMBOLO_INVALIDO);
inserirErro("ERRO_SIMBOLO_INVALIDO", t);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  /** Generated Token Manager. */
  public LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x9fffffff,0x9fffffff,};
	}

  /** Constructor with InputStream. */
  public Lexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexico(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[64];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 64; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
