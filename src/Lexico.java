/* Lexico.java */
/* Generated By:JavaCC: Do not edit this line. Lexico.java */
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
        String tipo;
        String lexema;

        public InfoToken(String tipo, String lexema) {
                this.tipo = tipo;
                this.lexema = lexema;
        }

        @Override
        public String toString() {
                return "Tipo: "+tipo+ ", Lexema: '"+ lexema+ "'";
        }
}

public class Lexico implements LexicoConstants {
        private LinkedList< InfoToken > l = new LinkedList<>();

        public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
                Lexico parser;
                FileInputStream arquivo;

                try {
                  arquivo = new FileInputStream("input.txt");
                }
                catch(FileNotFoundException e) {
                        System.out.println(e);
                        return;
                }

                try {
                        parser = new Lexico(arquivo);
                        parser.processarEntrada();

                        parser.imprimirTokens();
                }
                catch(ParseException e) {
                        System.out.println(e);
                }
                catch(TokenMgrError e) {
                        System.out.println(e);
                }
        }

        public void inserirToken(String tipo, String lexema) {
                l.add(new InfoToken(tipo, lexema));
        }

        public void imprimirTokens() {
                if(l.isEmpty()) {
                        System.out.println("Lista vazia");
                        return;
                }
                for(InfoToken tok : l) {
                        System.out.println(tok);
                }
        }

  final public void processarEntrada() throws ParseException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IF:
      case TOKEN_ELSE:
      case TOKEN_WHILE:
      case TOKEN_FOR:
      case TOKEN_VOID:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_RETURN:
      case TOKEN_TRUE:
      case TOKEN_FALSE:
      case ADICAO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case ATRIBUICAO:
      case MODULO:
      case IGUAL:
      case DIFERENTE:
      case MENOR:
      case MAIOR:
      case MAIOR_IGUAL:
      case MENOR_IGUAL:
      case AND:
      case NOT:
      case OR:
      case INTEIRO:
      case REAL:
      case IDENTIFICADOR:
      case CARACTER_ILEGAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IF:{
        t = jj_consume_token(TOKEN_IF);
inserirToken("RESERVADA_IF", t.image);
        break;
        }
      case TOKEN_ELSE:{
        t = jj_consume_token(TOKEN_ELSE);
inserirToken("RESERVADA_ELSE", t.image);
        break;
        }
      case TOKEN_WHILE:{
        t = jj_consume_token(TOKEN_WHILE);
inserirToken("RESERVADA_WHILE", t.image);
        break;
        }
      case TOKEN_FOR:{
        t = jj_consume_token(TOKEN_FOR);
inserirToken("RESERVADA_FOR", t.image);
        break;
        }
      case TOKEN_VOID:{
        t = jj_consume_token(TOKEN_VOID);
inserirToken("RESERVADA_VOID", t.image);
        break;
        }
      case TOKEN_INT:{
        t = jj_consume_token(TOKEN_INT);
inserirToken("RESERVADA_INTEGER", t.image);
        break;
        }
      case TOKEN_FLOAT:{
        t = jj_consume_token(TOKEN_FLOAT);
inserirToken("RESERVADA_FLOAT", t.image);
        break;
        }
      case TOKEN_CHAR:{
        t = jj_consume_token(TOKEN_CHAR);
inserirToken("RESERVADA_CHAR", t.image);
        break;
        }
      case TOKEN_BOOL:{
        t = jj_consume_token(TOKEN_BOOL);
inserirToken("RESERVADA_BOOL", t.image);
        break;
        }
      case TOKEN_RETURN:{
        t = jj_consume_token(TOKEN_RETURN);
inserirToken("RESERVADA_RETURN", t.image);
        break;
        }
      case TOKEN_TRUE:{
        t = jj_consume_token(TOKEN_TRUE);
inserirToken("RESERVADA_TRUE", t.image);
        break;
        }
      case TOKEN_FALSE:{
        t = jj_consume_token(TOKEN_FALSE);
inserirToken("RESERVADA_FALSE", t.image);
        break;
        }
      case ADICAO:{
        t = jj_consume_token(ADICAO);
inserirToken("SIMBOLO_ADICAO", t.image);
        break;
        }
      case SUBTRACAO:{
        t = jj_consume_token(SUBTRACAO);
inserirToken("SIMBOLO_SUBTRACAO", t.image);
        break;
        }
      case MULTIPLICACAO:{
        t = jj_consume_token(MULTIPLICACAO);
inserirToken("SIMBOLO_MULTIPLICACAO", t.image);
        break;
        }
      case DIVISAO:{
        t = jj_consume_token(DIVISAO);
inserirToken("SIMBOLO_DIVISAO", t.image);
        break;
        }
      case ATRIBUICAO:{
        t = jj_consume_token(ATRIBUICAO);
inserirToken("SIMBOLO_ATRIBUICAO", t.image);
        break;
        }
      case MODULO:{
        t = jj_consume_token(MODULO);
inserirToken("SIMBOLO_MODULO", t.image);
        break;
        }
      case IGUAL:{
        t = jj_consume_token(IGUAL);
inserirToken("SIMBOLO_IGUAL", t.image);
        break;
        }
      case DIFERENTE:{
        t = jj_consume_token(DIFERENTE);
inserirToken("SIMBOLO_DIFERENTE", t.image);
        break;
        }
      case MENOR:{
        t = jj_consume_token(MENOR);
inserirToken("SIMBOLO_MENOR", t.image);
        break;
        }
      case MAIOR:{
        t = jj_consume_token(MAIOR);
inserirToken("SIMBOLO_MAIOR", t.image);
        break;
        }
      case MAIOR_IGUAL:{
        t = jj_consume_token(MAIOR_IGUAL);
inserirToken("SIMBOLO_MAIOR_IGUAL", t.image);
        break;
        }
      case MENOR_IGUAL:{
        t = jj_consume_token(MENOR_IGUAL);
inserirToken("SIMBOLO_MENOR_IGUAL", t.image);
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
inserirToken("SIMBOLO_AND", t.image);
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
inserirToken("SIMBOLO_NOT", t.image);
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
inserirToken("SIMBOLO_OR", t.image);
        break;
        }
      case INTEIRO:{
        t = jj_consume_token(INTEIRO);
inserirToken("CONSTANTE_INTEIRA", t.image);
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
inserirToken("CONSTANTE_REAL", t.image);
        break;
        }
      case IDENTIFICADOR:{
        t = jj_consume_token(IDENTIFICADOR);
inserirToken("IDENTIFICADOR", t.image);
        break;
        }
      case CARACTER_ILEGAL:{
        t = jj_consume_token(CARACTER_ILEGAL);
inserirToken("CARACTER_ILEGAL", t.image);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  /** Generated Token Manager. */
  public LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x27,0x27,};
	}

  /** Constructor with InputStream. */
  public Lexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexico(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[38];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 38; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
